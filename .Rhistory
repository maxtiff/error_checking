View(df)
drops <- c("realtime_start","realtime_end")
df[,!(names(df) %in% drops)]
df <- df[,!(names(df) %in% drops)]
View(df)
dgorder <- df[,!(names(df) %in% drops)]
View(df)
View(df)
View(dgorder)
assign(series_id, data.frame(doc$observations))
View(DGORDER)
df <- data.frame(doc$observations)
library(httr)
GET(full_url)
doc
install.packages(forecast)
install.packages('forecast')
library(forecast)
orders_forecast <- forecast.HoltWinters(dgorder$value)
orders_forecast <- forecast.HoltWinters(DGORDER$value)
ordervalue <- DGORDER$value
View(dgorder)
orders_forecast <- forecast.HoltWinters(dgorder)
orders_forecast <- forecast.HoltWinters(dgorder, h=4)
orders_forecast <- forecast.HoltWinters(dgorder, h=4
)
plot.ts(dgorder)
dgorder
dgorder
plot.ts(dgorder)
??ts
?plot.ts
require(graphics)
plot(dgorder)
plot.ts(as.vector(dgorder))
data <- read.table(dgorder)
as.table(dgorder)
x <- dgorder[,'date']
y <- dgorder[,'value']
plot.ts(x,y)
plot(x,y)
date <- strptime(dgorder$date)
date <- strptime(dgorder$date,format="%Y-%m-%d")
date
dgorder$date <- strptime(dgorder$date, "%Y-%m-%d")
dgorder
plot.ts(dgorder)
View(dgorder)
plot(dgorder$date,dgorder$value)
forecast <- HoltWinters(dgorder, beta=FALSE, gamma=FALSE)
dgorder <- dgorder[!is.na]
is.na
dgorder <- na.omit(dgorder)
dgorder
dgorder <- dogorder[complete.cases(dgorder),]
dgorder <- dgorder[complete.cases(dgorder),]
dgorder <- dgorder[na.omit(dgorder),]
drops <- is.na(dgorder)
dgorder <- dgorder[!(drops),]
View(dgorder)
drops <- c("realtime_start","realtime_end")
dgorder <- df[,!(names(df) %in% drops)]
drops <- is.na(dgorder)
dgorder[!drops]
View(dgorder)
dgorder$value[dgorder$value == "."] <- NA
View(dgorder)
dgorder <- dgorder[!drops]
dgorder
View(drops)
dgorder
drops
View(DGORDER)
drops <- c("realtime_start","realtime_end")
dgorder <- df[,!(names(df) %in% drops)]
View(dgorder)
dgorder$value[dgorder$value == "."] <- NA
View(dgorder)
bad <- is.na(dgorder)
View(bad)
good <- complete.cases(dgorder)
good
dgorder[good,]
dgorder <- dogrder[good,]
dgorder <- dgorder[good,]
View(dgorder)
plot.ts
plot.ts(dgorder)
plot(dgorder)
dgorder$date <- strptime(dgorder$date, "%Y-%m-%d")
plot.ts(dgorder)
plot(dgorder$date,dgorder$value)
dgorderForecast <- HoltWinters(dgorder, gamma = FALSE)
dgorderForecast
dgorderForecast$SSE
plot(dgorderForecast)
dgorderForecast
plot(dgorder)
dgorderForecast <- HoltWinters(dgorder, beta=FALSE, gamma=FALSE)
dgorderForecast
plot(dgorderForecast)
dgorderForecast$fitted
library(forecast)
dgorderForecast <- forecast.HoltWinters(dgorderForecast, h=8)
source('~/scripts/error_checking/test_script.R')
View(DGORDER)
series_id
to.string(series_id)
toString(series_id)
source('~/scripts/error_checking/test_script.R')
source('~/scripts/error_checking/test_script.R')
View(DGORDER)
plot(DGORDER)
DGORDER$date <- strptime(DGORDER$date, format="%Y-%m-%d")
plot(DGORDER)
plot(DGORDER,type = l)
plot(DGORDER,type = 'l' )
good <- completecases(DGORDER)
DGORDER <- DGORDER[good,]
good <- complete.cases(DGORDER)
DGORDER <- DGORDER[good,]
View(DGORDER)
assign(series_id, data.frame(doc$observations))
drops <- c("realtime_start","realtime_end")
DGORDER <- DGORDER[,!(names(DGORDER) %in% drops)]
DGORDER$date <- strptime(DGORDER$date, format="%Y-%m-%d")
View(DGORDER)
good <- complete.cases(DGORDER)
DGORDER$value[DGORDER$value == "."] <- NA
View(DGORDER)
good <- complete.cases(DGORDER)
DGORDER <- DGORDER[good,]
plot(DGORDER,type = 'l' )
plot.ts(DGORDER)
dgFcast <- HoltWinters(DGORDER, beta=FALSE, gamma=FALSE)
dgFcast <- HoltWinters(DGORDER, gamma=FALSE)
library(jsonlite)
library(forecast)
base_url <- "http://api.stlouisfed.org/fred/series/observations?series_id="
series_id <- "ECOMNSA"
url_api <- "&api_key=76bb1186e704598b725af0a27159fdfc"
type <- "&file_type=json"
# units <- "&units=pc1"
full_url <- paste(base_url,series_id, url_api, type, sep="")
doc <- fromJSON(full_url)
assign(series_id, data.frame(doc$observations))
View(ECOMNSA)
source('~/scripts/error_checking/test_script.R')
drops <- c("realtime_start","realtime_end")
ECOMNSA <- ECOMNSA[,!(names(ECOMNSA) %in% drops)]
ECOMNSA$date <- strptime(ECOMNSA$date, format="%Y-%m-%d")
ECOMNSA$value[ECOMNSA$value == "."] <- NA
good <- complete.cases(ECOMNSA)
ECOMNSA <- ECOMNSA[good,]
View(ECOMNSA)
assign(series_id, data.frame(doc$observations))
View(ECOMNSA)
drops <- c("realtime_start","realtime_end")
ECOMNSA <- ECOMNSA[,!(names(ECOMNSA) %in% drops)]
ECOMNSA$date <- strptime(ECOMNSA$date, format="%Y-%m-%d")
plot(ECOMNSA,type = 'l' )
log_ecom <- log(ECOMNSA)
ECOMNSA$date <- strptime(ECOMNSA$date, format="%Y-%m-%d")
as.class(ECOMNSA$date)
class(ECOMNSA$date)
log_ecom <- log(ECOMNSA$value)
class(ECOMNSA$value)
ECOMNSA$value <- as.numeric(ECOMNSA$value)
log_ecom <- log(ECOMNSA)
log_ecom <- log(ECOMNSA$value)
ecom_fcast <- HoltWinters(log_ecom)
ECOMNSA$date <- as.numeric(ECOMNSA$date)
log_ecom <- log(ECOMNSA)
ecom_fcast <- HoltWinters(log_ecom)
log_ecom
library(jsonlite)
library(forecast)
base_url <- "http://api.stlouisfed.org/fred/series/observations?series_id="
series_id <- "ECOMNSA"
url_api <- "&api_key=76bb1186e704598b725af0a27159fdfc"
type <- "&file_type=json"
# units <- "&units=pc1"
full_url <- paste(base_url,series_id, url_api, type, sep="")
doc <- fromJSON(full_url)
assign(series_id, data.frame(doc$observations))
drops <- c("realtime_start","realtime_end")
ECOMNSA <- ECOMNSA[,!(names(ECOMNSA) %in% drops)]
ECOMNSA$date <- strptime(ECOMNSA$date, format="%Y-%m-%d")
plot(ECOMNSA,type = 'l' )
View(ECOMNSA)
ECOMNSA$date <- as.Date(ECOMNSA$date)
View(ECOMNSA)
ECOMNSA$value <- as.Numeric(ECOMNSA$value)
ECOMNSA$value <- as.numeric(ECOMNSA$value)
plot(ECOMNSA,type = 'l' )
log_ecom <- log(ECOMNSA)
ECOMNSA$value <- log(ECOMNSA$value)
fcast <- HoltWinters(ECOMNSA)
View(ECOMNSA)
fcast <- HoltWinters(ECOMNSA, gamma=FALSE)
plot(fcast)
View(log_ecom)
?magnitude
??magnitude
lapply(ECOMNSA$value, function(x) 10^(ceiling(log10(x))))
lapply(ECOMNSA$value, function(x) 10^(floor(log10(x))))
mag <- lapply(ECOMNSA$value, function(x) 10^(floor(log10(x))))
DGORDER$mag <- mag
ECOMNSA$mag <- mag
View(ECOMNSA)
mag <- lapply(ECOMNSA$value, function(x) 10^(ceiling(log10(x))))
ECOMNSA$mag <- mag
View(ECOMNSA)
source('~/scripts/error_checking/test_script.R')
source('~/scripts/error_checking/test_script.R')
View(ECOMNSA)
ECOMNSA$value[ECOMNSA$value > 0]
ECOMNSA[ECOMNSA > 0]
ECOMNSA$value[ECOMNSA$value > 0]
ECOMNSA$value <- ECOMNSA$value[ECOMNSA$value > 0] == NA
#
source('~/scripts/error_checking/test_script.R')
ECOMNSA$value <- ECOMNSA$value[ECOMNSA$value < 0 ] <- NA
View(ECOMNSA)
library(jsonlite)
library(forecast)
log10_ceiling <- function(x) {
10^(ceiling(log10(x)))
}
base_url <- "http://api.stlouisfed.org/fred/series/observations?series_id="
series_id <- "ECOMNSA"
url_api <- "&api_key=76bb1186e704598b725af0a27159fdfc"
type <- "&file_type=json"
units <- "&units=pc1"
full_url <- paste(base_url,series_id, units, url_api, type, sep="")
doc <- fromJSON(full_url)
assign(series_id, data.frame(doc$observations))
drops <- c("realtime_start","realtime_end")
ECOMNSA <- ECOMNSA[,!(names(ECOMNSA) %in% drops)]
ECOMNSA$date <- strptime(ECOMNSA$date, format="%Y-%m-%d")
View(ECOMNSA)
ECOMNSA$value <- ECOMNSA$value[ECOMNSA$value <= 0 ] <- NA
View(ECOMNSA)
library(jsonlite)
library(forecast)
log10_ceiling <- function(x) {
10^(ceiling(log10(x)))
}
base_url <- "http://api.stlouisfed.org/fred/series/observations?series_id="
series_id <- "ECOMNSA"
url_api <- "&api_key=76bb1186e704598b725af0a27159fdfc"
type <- "&file_type=json"
units <- "&units=pc1"
full_url <- paste(base_url,series_id, units, url_api, type, sep="")
doc <- fromJSON(full_url)
assign(series_id, data.frame(doc$observations))
drops <- c("realtime_start","realtime_end")
ECOMNSA <- ECOMNSA[,!(names(ECOMNSA) %in% drops)]
ECOMNSA$date <- strptime(ECOMNSA$date, format="%Y-%m-%d")
library(jsonlite)
library(forecast)
log10_ceiling <- function(x) {
10^(ceiling(log10(x)))
}
base_url <- "http://api.stlouisfed.org/fred/series/observations?series_id="
series_id <- "ECOMNSA"
url_api <- "&api_key=76bb1186e704598b725af0a27159fdfc"
type <- "&file_type=json"
units <- "&units=pc1"
full_url <- paste(base_url,series_id, units, url_api, type, sep="")
doc <- fromJSON(full_url)
assign(series_id, data.frame(doc$observations))
drops <- c("realtime_start","realtime_end")
ECOMNSA <- ECOMNSA[,!(names(ECOMNSA) %in% drops)]
ECOMNSA$date <- strptime(ECOMNSA$date, format="%Y-%m-%d")
library(caret)
library(kernlab)
inTrain <- createDataPartition(y=spam$type, p=.75,list=F)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=.75,list=F)
training <- spam[inTrain]
training <- spam[inTrain,]
testing <-spam[-inTrain,]
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
warnings()
modelFit
modelFit$finalModel
predictions <- predicy(modelFit, newdata=testing)
predictions <- predict(modelFit, newdata=testing)
predictions
confusionMatrix(predictions,testing$type)
dim(training)
View(ECOMNSA)
folds <- createTimeSlices(y=ECOMNSA,initialWindow = 20, horizon = 10)
library(jsonlite)
library(forecast)
log10_ceiling <- function(x) {
10^(ceiling(log10(x)))
}
base_url <- "http://api.stlouisfed.org/fred/series/observations?series_id="
series_id <- "ECOMNSA"
url_api <- "&api_key=76bb1186e704598b725af0a27159fdfc"
type <- "&file_type=json"
# units <- "&units=pc1"
full_url <- paste(base_url,series_id, url_api, type, sep="")
doc <- fromJSON(full_url)
assign(series_id, data.frame(doc$observations))
drops <- c("realtime_start","realtime_end")
ECOMNSA <- ECOMNSA[,!(names(ECOMNSA) %in% drops)]
ECOMNSA$date <- strptime(ECOMNSA$date, format="%Y-%m-%d")
# ECOMNSA$value <- ECOMNSA$value[ECOMNSA$value <= 0 ] <- NA
#
# good <- complete.cases(ECOMNSA)
# ECOMNSA <- ECOMNSA[good,]
plot(ECOMNSA,type = 'l' )
folds <- createTimeSlices(y=ECOMNSA,initialWindow = 20, horizon = 10)
View(ECOMNSA)
folds <- createTimeSlices(y=ECOMNSA$value,initialWindow = 20, horizon = 10)
names(folds)
folds$train[[1]]
folds$test[[1]]
summary(ECOMNSA$value)
summary(ECOMNSA)
qplot(ECOMNSA)
qplot(ECOMNSA$value,ECOMNSA$date)
qplot(ECOMNSA$date,ECOMNSA$value)
plot(ECOMNSA)
plot(ECOMNSA, type = 'b')
plot(ECOMNSA, type = 'l')
plot(ECOMNSA, type = 'b')
sd(ECOMNSA$value)
mean(ECOMNSA$value)
ECOMNSA
mean(ECOMNSA)
mean(train)
mean(test)
sd(train)
sd(test)
sd(ECOMNSA)
sd(ECOMNSA$value)
ECOMNSA$value
decomp
install.packages('timsac')
library(timsav)
library(timsac)
decompt(ECOMNSA)
decomp(ECOMNSA)
decomp(ECOMNSA$value)
install.packages('tsr')
install.packages('ast')
??ast
ECOMNSA$mag <- mag
View(ECOMNSA)
mag <- lapply(ECOMNSA$value, function(x) 10^(floor(log10(x))))
ECOMNSA$mag <- mag
mag <- lapply(ECOMNSA$value, function(x) 10^(floor(log10(x))))
mag <- lapply(ECOMNSA$value, function(x) 10^(ceiling(log10(x))))
class(ECOMNSA$value)
mag <- lapply(as.numeric(ECOMNSA$value), function(x) 10^(ceiling(log10(x))))
ECOMNSA$mag <- mag
View(ECOMNSA)
mag <- lapply(as.numeric(ECOMNSA$value), function(x) 10^(floor(log10(x))))
ECOMNSA$mag <- mag
View(DGORDER)
View(ECOMNSA)
base_url <- "http://api.stlouisfed.org/fred/series/observations?series_id="
series_id <- "ECOMNSA"
url_api <- "&api_key=76bb1186e704598b725af0a27159fdfc"
type <- "&file_type=json"
units <- "&units=pc1"
full_url <- paste(base_url,series_id, url_api, units, type, sep="")
doc <- fromJSON(full_url)
assign(series_id, data.frame(doc$observations))
drops <- c("realtime_start","realtime_end")
ECOMNSA <- ECOMNSA[,!(names(ECOMNSA) %in% drops)]
ECOMNSA$date <- strptime(ECOMNSA$date, format="%Y-%m-%d")
View(ECOMNSA)
sum <- sum(ECOMNSA$value)
as.numeric(ECOMNSA$value)
sum <- sum(ECOMNSA$value)
good <- complete.cases(ECOMNSA)
ECOMNSA <- ECOMNSA[good,]
View(ECOMNSA)
View(DGORDER)
base_url <- "http://api.stlouisfed.org/fred/series/observations?series_id="
series_id <- "ECOMNSA"
url_api <- "&api_key=76bb1186e704598b725af0a27159fdfc"
type <- "&file_type=json"
units <- "&units=pc1"
full_url <- paste(base_url,series_id, url_api, units, type, sep="")
doc <- fromJSON(full_url)
assign(series_id, data.frame(doc$observations))
drops <- c("realtime_start","realtime_end")
ECOMNSA <- ECOMNSA[,!(names(ECOMNSA) %in% drops)]
ECOMNSA$date <- strptime(ECOMNSA$date, format="%Y-%m-%d")
as.numeric(ECOMNSA$value)
good <- complete.cases(ECOMNSA)
ECOMNSA <- ECOMNSA[good,]
sum <- sum(ECOMNSA$value)
doc <- fromJSON(full_url)
assign(series_id, data.frame(doc$observations))
drops <- c("realtime_start","realtime_end")
ECOMNSA <- ECOMNSA[,!(names(ECOMNSA) %in% drops)]
ECOMNSA$date <- strptime(ECOMNSA$date, format="%Y-%m-%d")
good <- complete.cases(ECOMNSA)
View(ECOMNSA)
as.numeric(ECOMNSA$value)
View(ECOMNSA)
View(ECOMNSA)
ECOMNSA$value <- ECOMNSA$value[ECOMNSA$value <= "." ] <- NA
View(ECOMNSA)
oc <- fromJSON(full_url)
assign(series_id, data.frame(doc$observations))
drops <- c("realtime_start","realtime_end")
ECOMNSA <- ECOMNSA[,!(names(ECOMNSA) %in% drops)]
ECOMNSA$date <- strptime(ECOMNSA$date, format="%Y-%m-%d")
ECOMNSA$value <- ECOMNSA$value[ECOMNSA$value = "." ] <- NA
ECOMNSA$value <- ECOMNSA$value[ECOMNSA$value == "." ] <- NA
View(ECOMNSA)
doc <- fromJSON(full_url)
assign(series_id, data.frame(doc$observations))
drops <- c("realtime_start","realtime_end")
ECOMNSA <- ECOMNSA[,!(names(ECOMNSA) %in% drops)]
ECOMNSA$date <- strptime(ECOMNSA$date, format="%Y-%m-%d")
View(ECOMNSA)
ECOMNSA$value <- ECOMNSA$value[ECOMNSA$value == "." ] <- NA
View(ECOMNSA)
doc <- fromJSON(full_url)
assign(series_id, data.frame(doc$observations))
drops <- c("realtime_start","realtime_end")
ECOMNSA <- ECOMNSA[,!(names(ECOMNSA) %in% drops)]
ECOMNSA$date <- strptime(ECOMNSA$date, format="%Y-%m-%d")
as.numeric(ECOMNSA$value)
View(ECOMNSA)
ECOMNSA$value <- ECOMNSA$value[ECOMNSA$value == "." ] <- NA
View(ECOMNSA)
doc <- fromJSON(full_url)
assign(series_id, data.frame(doc$observations))
drops <- c("realtime_start","realtime_end")
ECOMNSA <- ECOMNSA[,!(names(ECOMNSA) %in% drops)]
ECOMNSA$date <- strptime(ECOMNSA$date, format="%Y-%m-%d")
as.numeric(ECOMNSA$value)
doc <- fromJSON(full_url)
assign(series_id, data.frame(doc$observations))
drops <- c("realtime_start","realtime_end")
ECOMNSA <- ECOMNSA[,!(names(ECOMNSA) %in% drops)]
ECOMNSA$date <- strptime(ECOMNSA$date, format="%Y-%m-%d")
ECOMNSA$value <- as.numeric(ECOMNSA$value)
ECOMNSA$value <- ECOMNSA$value[ECOMNSA$value == "." ] <- NA
View(ECOMNSA)
doc <- fromJSON(full_url)
assign(series_id, data.frame(doc$observations))
drops <- c("realtime_start","realtime_end")
ECOMNSA <- ECOMNSA[,!(names(ECOMNSA) %in% drops)]
ECOMNSA$date <- strptime(ECOMNSA$date, format="
Y-%m-%d")
ECOMNSA$value <- as.numeric(ECOMNSA$value)
View(ECOMNSA)
doc <- fromJSON(full_url)
assign(series_id, data.frame(doc$observations))
drops <- c("realtime_start","realtime_end")
ECOMNSA <- ECOMNSA[,!(names(ECOMNSA) %in% drops)]
ECOMNSA$date <- strptime(ECOMNSA$date, format="%Y-%m-%d")
ECOMNSA$value <- as.numeric(ECOMNSA$value)
View(ECOMNSA)
View(ECOMNSA)
good <- complete.cases(ECOMNSA)
good <- complete.cases(ECOMNSA$value)
ECOMNSA <- ECOMNSA[good,]
View(ECOMNSA)
sum <- sum(ECOMNSA$value)
mean <- mean(ECOMNSA$value)
diff <- lapply(ECOMNSA$value, function(x) x-mean)
sqr <- lapply(diff, function(x) x*x)
sqr_sum <- sum(sqr)
sqr_sum <- sum(as.numeric(sqr))
count(sqr)
length(sqr)
sqr_sum/as.numeric(length(sqr))
dvd_sum_sqrs <- sqr_sum/as.numeric(length(sqr))
sd_pct_chg <- sqrt(dvd_sum_sqrs)
plot(ECOMNSA)
plot(ECOMNSA$value)
full_url <- paste(base_url,series_id, url_api, type, sep="")
doc <- fromJSON(full_url)
assign(series_id, data.frame(doc$observations))
drops <- c("realtime_start","realtime_end")
ECOMNSA <- ECOMNSA[,!(names(ECOMNSA) %in% drops)]
ECOMNSA$date <- strptime(ECOMNSA$date, format="%Y-%m-%d")
ECOMNSA$value <- as.numeric(ECOMNSA$value)
plot(ECOMNSA,type = 'l' )
decomp(ECOMNSA)
decomp(ECOMNSA$value)
?scan
library(RecordLinkage)
install.packages(RecordLinkage)
install.packages('RecordLinkage')
source('~/scripts/error_checking/novelty_detection.R')
setwd("~/scripts/error_checking")
source('~/scripts/error_checking/novelty_detection.R')
source('~/scripts/error_checking/novelty_detection.R')
View(data)
source('~/scripts/error_checking/novelty_detection.R')
View(data)
scaled.data <- scale(as.numeric(data$value))
View(scaled.data)
source('~/scripts/error_checking/novelty_detection.R')
View(data)
source('~/scripts/error_checking/novelty_detection.R')
View(data)
source('~/scripts/error_checking/novelty_detection.R')
